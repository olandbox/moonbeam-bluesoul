{"version":3,"file":"scripts.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU,oDAAoD,SAAS;AAC7H;AACA;AACA;AACA,wCAAwC;AACxC,yCAAyC;AACzC,8CAA8C;AAC9C,gDAAgD;AAChD,mDAAmD;AACnD,kDAAkD;AAClD,gDAAgD;AAChD,mDAAmD;AACnaAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wCAAwC;AAC1D,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C,IAAI;AACpG;AACA,aAAa;AACb;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oBAAoB,aAAa;AACjC,aAAa;AACb;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oBAAoB,+EAA+E;AACnG,cAAc;AACd;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oBAAoB,8EAA8E;AAClG,cAAc;AACd;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oBAAoB,4CAA4C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C,aAAa;AACb;AACA,oBAAoB,4CAA4C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oBAAoB,4CAA4C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["src\\assets\\js\\ks3jssdk.js"],"sourcesContent":["(function KS3JsSDK (win) {\r\n    var ks3FileUploader = function(ks3PostOptions, pluploadOptions){\r\n        this.defaultKS3Options  = {\r\n            KSSAccessKeyId: \"\",\r\n            policy: \"\", //请求中用于描述获准行为的安全策略。没有安全策略的请求被认为是匿名请求，只能访问公共可写空间。\r\n            signature: \"\", //根据Access Key Secret和policy计算的签名信息，KS3验证该签名信息从而验证该Post请求的合法性。\r\n            bucket_name: \"\", //上传的空间名\r\n            key: \"\", //被上传键值的名称。如果用户想要使用文件名作为键值，可以使用${filename} 变量。例如：如果用户想要上传文件local.jpg，需要指明specify /user/betty/${filename}，那么键值就会为/user/betty/local.jpg。\r\n            acl: \"private\", //上传文件访问权限,有效值: private | public-read\r\n            uploadDomain: \"\", //上传域名,http://destination-bucket.kss.ksyun.com 或者 http://kssws.ks-cdn.com/destination-bucket\r\n            autoStart: false, //是否在文件添加完毕后自动上传\r\n            onInitCallBack: function(){}, //上传初始化时调用的回调函数\r\n            onErrorCallBack: function(){}, //发生错误时调用的回调函数\r\n            onFilesAddedCallBack: function(){}, //文件添加到浏览器时调用的回调函数\r\n            onBeforeUploadCallBack: function(){}, //文件上传之前时调用的回调函数\r\n            onStartUploadFileCallBack: function(){}, //文件开始上传时调用的回调函数\r\n            onUploadProgressCallBack: function(){}, //上传进度时调用的回调函数\r\n            onFileUploadedCallBack: function(){}, //文件上传完成时调用的回调函数\r\n            onUploadCompleteCallBack: function(){} //所有上传完成时调用的回调函数\r\n        };\r\n        if (ks3PostOptions){\r\n            //用ks3PostOptions覆盖 defaultKS3Options\r\n            plupload.extend(this.defaultKS3Options, ks3PostOptions);\r\n        }\r\n\r\n        var multipartParams = {};\r\n\r\n        if (this.defaultKS3Options.signature&&this.defaultKS3Options.policy){\r\n            multipartParams = {\r\n                \"key\": this.defaultKS3Options.key,\r\n                \"acl\": this.defaultKS3Options.acl,\r\n                \"signature\" : this.defaultKS3Options.signature,\r\n                \"KSSAccessKeyId\": this.defaultKS3Options.KSSAccessKeyId,\r\n                \"policy\": this.defaultKS3Options.policy\r\n                ,'Cache-Control':this.defaultKS3Options['Cache-Control']\r\n                ,'Expires': this.defaultKS3Options['Expires']\r\n                ,'Content-Disposition': this.defaultKS3Options['Content-Disposition']\r\n                ,'Content-Encoding': this.defaultKS3Options['Content-Encoding']\r\n                ,'Content-Type': this.defaultKS3Options['Content-Type']\r\n                ,'Content-Encoding': this.defaultKS3Options['Content-Encoding']\r\n            }\r\n        } else {\r\n            multipartParams = {\r\n                \"key\": this.defaultKS3Options.key,\r\n                \"acl\": this.defaultKS3Options.acl,\r\n                \"KSSAccessKeyId\": this.defaultKS3Options.KSSAccessKeyId\r\n            }\r\n        }\r\n\r\n        for(var prop in this.defaultKS3Options) {\r\n            if(typeof this.defaultKS3Options[prop] == 'string' && prop.indexOf('x-kss-meta-') !== -1 || prop == \"x-kss-newfilename-in-body\") {\r\n                multipartParams[prop] = this.defaultKS3Options[prop];\r\n            }\r\n        }\r\n\r\n        this.defaultPluploadOptions = {\r\n            runtimes : 'html5,flash,silverlight,html4', //上传模式，依次退化;\r\n            url: this.defaultKS3Options.uploadDomain,\r\n            browse_button: 'browse', //触发对话框的DOM元素自身或者其ID\r\n            flash_swf_url : 'js/Moxie.swf', //Flash组件的相对路径\r\n            silverlight_xap_url : 'js/Moxie.xap', //Silverlight组件的相对路径;\r\n            drop_element: undefined, //触发拖动上传的元素或者其ID\r\n            multipart: true,\r\n            multipart_params: multipartParams\r\n        };\r\n\r\n        if (pluploadOptions){\r\n            plupload.extend(this.defaultPluploadOptions, pluploadOptions);\r\n        }\r\n\r\n        this.uploader = new plupload.Uploader(this.defaultPluploadOptions);\r\n        this.uploader.bind(\"Init\", this.onInit, this);\r\n        this.uploader.bind(\"Error\", this.onUploadError, this);\r\n        this.uploader.init();\r\n\r\n        this.uploader.bind(\"FilesAdded\", this.onFilesAdded, this)\r\n        this.uploader.bind(\"BeforeUpload\", this.onBeforeUpload, this)\r\n        this.uploader.bind(\"UploadFile\", this.onStartUploadFile, this)\r\n        this.uploader.bind(\"UploadProgress\", this.onUploadProgress, this)\r\n        this.uploader.bind(\"FileUploaded\", this.onFileUploaded, this)\r\n        this.uploader.bind(\"UploadComplete\", this.onUploadComplete, this)\r\n    };\r\n\r\n    ks3FileUploader.prototype.onInit = function(uploader, obj){\r\n        this.defaultKS3Options.onInitCallBack&&\r\n        this.defaultKS3Options.onInitCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onUploadError = function(uploader, obj) {\r\n        this.defaultKS3Options.onErrorCallBack&&\r\n        this.defaultKS3Options.onErrorCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onFilesAdded = function(uploader, obj) {\r\n        if (this.defaultKS3Options.autoStart)\r\n            this.uploader.start();\r\n        this.defaultKS3Options.onFilesAddedCallBack&&\r\n        this.defaultKS3Options.onFilesAddedCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onBeforeUpload = function(uploader, obj) {\r\n        this.defaultKS3Options.onBeforeUploadCallBack&&\r\n        this.defaultKS3Options.onBeforeUploadCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onStartUploadFile = function(uploader, obj) {\r\n        this.defaultKS3Options.onStartUploadFileCallBack&&\r\n        this.defaultKS3Options.onStartUploadFileCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onUploadProgress = function(uploader, obj) {\r\n        this.defaultKS3Options.onUploadProgressCallBack&&\r\n        this.defaultKS3Options.onUploadProgressCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onFileUploaded = function(uploader, obj, resObj) {\r\n        this.defaultKS3Options.onFileUploadedCallBack&&\r\n        this.defaultKS3Options.onFileUploadedCallBack.apply(this, [uploader, obj, resObj]);\r\n    };\r\n\r\n    ks3FileUploader.prototype.onUploadComplete = function(uploader, obj) {\r\n        this.defaultKS3Options.onUploadCompleteCallBack&&\r\n        this.defaultKS3Options.onUploadCompleteCallBack.apply(this, [uploader, obj]);\r\n    };\r\n\r\n    return win.ks3FileUploader = ks3FileUploader;\r\n})(window);\r\n\r\n//create namespace\r\nvar Ks3 = {};\r\n\r\n/**\r\n * 给url添加请求参数\r\n * @param url\r\n * @param obj\r\n * @returns {string}  带请求参数的url\r\n */\r\nKs3.addURLParam = function(url, obj) {\r\n    url += url.indexOf(\"?\") == -1  ? \"?\" : \"\";\r\n\r\n    var ret = [];\r\n    for(var key in obj){\r\n        key = encodeURIComponent(key);\r\n        var value = obj[key];\r\n        if(value && Object.prototype.toString.call(value) == '[object String]'){\r\n            ret.push(key + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return url + ret.join('&');\r\n}\r\n\r\n/**\r\n * Changes XML DOM to JSON  （xml 不带属性）\r\n * @param xml\r\n * @returns {{}}  js对象\r\n */\r\nKs3.xmlToJson = function (xml) {\r\n    // Create the return object\r\n    var obj = {};\r\n    if (xml.nodeType == Node.TEXT_NODE) { // text\r\n        obj = xml.nodeValue;\r\n    }\r\n\r\n    // do children\r\n    if (xml.hasChildNodes()) {\r\n        for(var i = 0; i < xml.childNodes.length; i++) {\r\n            var item = xml.childNodes.item(i);\r\n            var nodeName = item.nodeName;\r\n            if (typeof(obj[nodeName]) == \"undefined\") {\r\n                if( nodeName === '#text'){\r\n                    obj = item.nodeValue;\r\n                }else{\r\n                    obj[nodeName] = Ks3.xmlToJson(item);\r\n                }\r\n            } else {//同级同标签转化为数组\r\n                if (typeof(obj[nodeName].length) == \"undefined\") {\r\n                    var old = obj[nodeName];\r\n                    obj[nodeName] = [];\r\n                    obj[nodeName].push(old);\r\n                }\r\n                obj[nodeName].push(Ks3.xmlToJson(item));\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n};\r\n\r\n\r\n\r\n\r\n/*基于Javascript的Base64加解密算法*/\r\nKs3.Base64 = {\r\n    encTable :[  /*Base64编码表*/\r\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\r\n        'I', 'J', 'K', 'L', 'M', 'N', 'O' ,'P',\r\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\r\n        'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\r\n        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\r\n        'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\r\n        'w', 'x', 'y', 'z', '0', '1', '2', '3',\r\n        '4', '5', '6', '7', '8', '9', '+', '/'\r\n    ],\r\n    decTable:[ /*Base64解码表*/\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53,\r\n        54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\r\n        -1, -1, -1, -1, -1, 00, 01, 02, 03, 04,\r\n        05, 06, 07, 08, 09, 10, 11, 12, 13, 14,\r\n        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\r\n        25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\r\n        29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\r\n        39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\r\n        49, 50, 51, -1, -1, -1, -1, -1\r\n    ],\r\n    encUTF8: function(str) { /*将任意字符串按UTF8编码*/\r\n        var code, res =[], len =str.length;\r\n        var byte1, byte2, byte3, byte4, byte5, byte6;\r\n        for (var i = 0; i < len; i++) {\r\n            //Unicode码：按范围确定字节数\r\n            code = str.charCodeAt(i);\r\n\r\n            //单字节ascii字符：U+00000000 – U+0000007F\t0xxxxxxx\r\n            if (code > 0x0000 && code <= 0x007F) res.push(code);\r\n\r\n            //双字节字符：U+00000080 – U+000007FF\t110xxxxx 10xxxxxx\r\n            else if (code >= 0x0080 && code <= 0x07FF) {\r\n                byte1 = 0xC0 | ((code >> 6) & 0x1F);\r\n                byte2 = 0x80 | (code & 0x3F);\r\n                res.push(byte1, byte2);\r\n            }\r\n\r\n            //三字节字符：U+00000800 – U+0000FFFF\t1110xxxx 10xxxxxx 10xxxxxx\r\n            else if (code >= 0x0800 && code <= 0xFFFF) {\r\n                byte1 = 0xE0 | ((code >> 12) & 0x0F);\r\n                byte2 = 0x80 | ((code >> 6) & 0x3F);\r\n                byte3 = 0x80 | (code & 0x3F);\r\n                res.push(byte1, byte2, byte3);\r\n            }\r\n\r\n            //四字节字符：U+00010000 – U+001FFFFF\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n            else if (code >= 0x00010000 && code <= 0x001FFFFF) {\r\n                byte1 =0xF0 | ((code>>18) & 0x07);\r\n                byte2 =0x80 | ((code>>12) & 0x3F);\r\n                byte3 =0x80 | ((code>>6) & 0x3F);\r\n                byte4 =0x80 | (code & 0x3F);\r\n                res.push(byte1, byte2, byte3, byte4);\r\n            }\r\n\r\n            //五字节字符：U+00200000 – U+03FFFFFF\t111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n            else if (code >= 0x00200000 && code <= 0x03FFFFFF) {\r\n                byte1 =0xF0 | ((code>>24) & 0x03);\r\n                byte2 =0xF0 | ((code>>18) & 0x3F);\r\n                byte3 =0x80 | ((code>>12) & 0x3F);\r\n                byte4 =0x80 | ((code>>6) & 0x3F);\r\n                byte5 =0x80 | (code & 0x3F);\r\n                res.push(byte1, byte2, byte3, byte4, byte5);\r\n            }\r\n\r\n            //六字节字符：U+04000000 – U+7FFFFFFF\t1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n            else if (code >= 0x04000000 && code <= 0x7FFFFFFF) {\r\n                byte1 =0xF0 | ((code>>30) & 0x01);\r\n                byte2 =0xF0 | ((code>>24) & 0x3F);\r\n                byte3 =0xF0 | ((code>>18) & 0x3F);\r\n                byte4 =0x80 | ((code>>12) & 0x3F);\r\n                byte5 =0x80 | ((code>>6) & 0x3F);\r\n                byte6 =0x80 | (code & 0x3F);\r\n                res.push(byte1, byte2, byte3, byte4, byte5, byte6);\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n    encode: function(str) {\r\n        /**\r\n         * 将任意字符串用Base64加密\r\n         * str：要加密的字符串\r\n         * utf8编码格式\r\n         */\r\n        if (!str) return '';\r\n        var bytes = this.encUTF8(str);\r\n        var i = 0, len = bytes.length, res = [];\r\n        var c1, c2, c3;\r\n        while (i < len) {\r\n            c1 = bytes[i++] & 0xFF;\r\n            res.push(this.encTable[c1 >> 2]);\r\n            //结尾剩一个字节补2个=\r\n            if (i == len) {\r\n                res.push(this.encTable[(c1 & 0x03) << 4], '==');\r\n                break;\r\n            }\r\n\r\n            c2 = bytes[i++];\r\n            //结尾剩两个字节补1个=\r\n            if (i == len) {\r\n                res.push(this.encTable[((c1 & 0x03) << 4) | ((c2 >> 4) & 0x0F)]);\r\n                res.push(this.encTable[(c2 & 0x0F) << 2], '=');\r\n                break;\r\n            }\r\n\r\n            c3 = bytes[i++];\r\n            res.push(this.encTable[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);\r\n            res.push(this.encTable[((c2 & 0x0F) << 2) | ((c3 & 0xC0) >> 6)]);\r\n            res.push(this.encTable[c3 & 0x3F]);\r\n        }\r\n        return res.join('');\r\n    }\r\n\r\n};\r\n\r\n\r\nKs3.chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode  */\r\nKs3.b64pad  = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\n\r\n\r\n/*\r\n * //使用hmac_sha1算法计算字符串的签名\r\n *  return base-64 encoded strings\r\n */\r\n Ks3.b64_hmac_sha1 = function(key, data) {\r\n    return Ks3.binb2b64(Ks3.core_hmac_sha1(key, data));\r\n}\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data\r\n */\r\nKs3.core_hmac_sha1 = function(key, data)\r\n{\r\n    var bkey = Ks3.str2binb(key);\r\n    if(bkey.length > 16) bkey = Ks3.core_sha1(bkey, key.length * Ks3.chrsz);\r\n\r\n    var ipad = Array(16), opad = Array(16);\r\n    for(var i = 0; i < 16; i++)\r\n    {\r\n        ipad[i] = bkey[i] ^ 0x36363636;\r\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n    }\r\n\r\n    var hash = Ks3.core_sha1(ipad.concat(Ks3.str2binb(data)), 512 + data.length * Ks3.chrsz);\r\n    return Ks3.core_sha1(opad.concat(hash), 512 + 160);\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a base-64 string\r\n */\r\nKs3.binb2b64 = function(binarray)\r\n{\r\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    var str = \"\";\r\n    for(var i = 0; i < binarray.length * 4; i += 3)\r\n    {\r\n        var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)\r\n            | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )\r\n            |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\r\n        for(var j = 0; j < 4; j++)\r\n        {\r\n            if(i * 8 + j * 6 > binarray.length * 32) str += Ks3.b64pad;\r\n            else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);\r\n        }\r\n    }\r\n    return str;\r\n}\r\n\r\n/*\r\n * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n */\r\nKs3.str2binb = function(str)\r\n{\r\n    var bin = Array();\r\n    var mask = (1 << Ks3.chrsz) - 1;\r\n    for(var i = 0; i < str.length * Ks3.chrsz; i += Ks3.chrsz)\r\n        bin[i>>5] |= (str.charCodeAt(i / Ks3.chrsz) & mask) << (32 - Ks3.chrsz - i%32);\r\n    return bin;\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nKs3.core_sha1 = function(x, len)\r\n{\r\n    /* append padding */\r\n    x[len >> 5] |= 0x80 << (24 - len % 32);\r\n    x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n    var w = Array(80);\r\n    var a =  1732584193;\r\n    var b = -271733879;\r\n    var c = -1732584194;\r\n    var d =  271733878;\r\n    var e = -1009589776;\r\n\r\n    for(var i = 0; i < x.length; i += 16)\r\n    {\r\n        var olda = a;\r\n        var oldb = b;\r\n        var oldc = c;\r\n        var oldd = d;\r\n        var olde = e;\r\n\r\n        for(var j = 0; j < 80; j++)\r\n        {\r\n            if(j < 16) w[j] = x[i + j];\r\n            else w[j] = Ks3.rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n            var t = Ks3.safe_add(Ks3.safe_add(Ks3.rol(a, 5), Ks3.sha1_ft(j, b, c, d)),\r\n                Ks3.safe_add(Ks3.safe_add(e, w[j]), Ks3.sha1_kt(j)));\r\n            e = d;\r\n            d = c;\r\n            c = Ks3.rol(b, 30);\r\n            b = a;\r\n            a = t;\r\n        }\r\n\r\n        a = Ks3.safe_add(a, olda);\r\n        b = Ks3.safe_add(b, oldb);\r\n        c = Ks3.safe_add(c, oldc);\r\n        d = Ks3.safe_add(d, oldd);\r\n        e = Ks3.safe_add(e, olde);\r\n    }\r\n    return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nKs3.safe_add =function(x, y)\r\n{\r\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n    return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nKs3.rol = function(num, cnt)\r\n{\r\n    return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nKs3.sha1_ft = function(t, b, c, d)\r\n{\r\n    if(t < 20) return (b & c) | ((~b) & d);\r\n    if(t < 40) return b ^ c ^ d;\r\n    if(t < 60) return (b & c) | (b & d) | (c & d);\r\n    return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nKs3.sha1_kt = function(t)\r\n{\r\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n        (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n\r\n/**\r\n *  产生headers\r\n *  CanonicalizedKssHeaders\r\n */\r\nKs3.generateHeaders =function(header) {\r\n    var str = '';\r\n    var arr = [];\r\n\r\n    if(header){\r\n        var prefix = 'x-kss';\r\n        for(var it in header){\r\n            // step1 : 所有`x-kss`的属性都转换为小写\r\n            if(it.indexOf(prefix) == 0){\r\n                arr.push((it.toLowerCase() +':'+header[it]));\r\n            }\r\n        }\r\n        // step2 : 根据属性名排序\r\n        arr.sort();\r\n        // step3 : 拼接起来\r\n        str = arr.join('\\n');\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * 根据SK和请求生成Signature（用于Authorization头部）\r\n * @param sk      secrete key\r\n * @param bucket  bucket name\r\n * @param resource  ObjectKey[?subResource]\r\n * @param http_verb  PUT/GET/POST/DELETE\r\n * @param content_type Content-Type request header\r\n * @param headers  headers of request\r\n * @returns {*}\r\n */\r\nKs3.generateToken = function (sk, bucket, resource, http_verb, content_type, headers, time_stamp){\r\n    // Content-MD5, Content-Type, CanonicalizedKssHeaders都为空\r\n    var canonicalized_Kss_Headers = Ks3.generateHeaders(headers);\r\n    var canonicalized_Resource = '/' + bucket + '/' + resource;\r\n    if (canonicalized_Kss_Headers !== '') {\r\n        var string2Sign = http_verb + '\\n' + '' + '\\n' + content_type + '\\n'  + time_stamp + '\\n' + canonicalized_Kss_Headers + '\\n' + canonicalized_Resource;\r\n    } else {\r\n        var string2Sign = http_verb + '\\n' + '' + '\\n' + content_type + '\\n' + time_stamp + '\\n' + canonicalized_Resource;\r\n    }\r\n    //console.log('string2Sign:' + string2Sign);\r\n    var signature = Ks3.b64_hmac_sha1(sk, string2Sign);\r\n    //console.log('signature:' + signature);\r\n    return signature;\r\n}\r\n\r\n/**\r\n * 获取过期时间戳\r\n * @param seconds  多少秒后过期\r\n */\r\nfunction getExpires(seconds) {\r\n    return Math.round(new Date().getTime()/1000) + seconds;\r\n};\r\n\r\n/*\r\n * url endpoints for different regions\r\n */\r\nKs3.ENDPOINT = {\r\n    AMERICA: 'ks3-us-west-1.ksyuncs.com',\r\n    BEIJING : 'ks3-cn-beijing.ksyuncs.com',\r\n    HONGKONG: 'ks3-cn-hk-1.ksyuncs.com',\r\n    SHANGHAI: 'ks3-cn-shanghai.ksyuncs.com',\r\n    GUANGZHOU: 'ks3-cn-guangzhou.ksyuncs.com',\r\n    RUSSIA: 'ks3-rus.ksyuncs.com',\r\n    SINGAPORE: 'ks3-sgp.ksyuncs.com',\r\n    JR_BEIJING: 'ks3-jr-beijing.ksyuncs.com',\r\n    JR_SHANGHAI: 'ks3-jr-shanghai.ksyuncs.com',\r\n    GOV_BEIJING: 'ks3-gov-beijing.ksyuncs.com'\r\n};\r\n\r\nKs3.config = {\r\n    AK: '',\r\n    SK: '',\r\n    protocol:'http',\r\n    baseUrl:'',\r\n    region: '',\r\n    bucket: '',\r\n    prefix:'kss',\r\n    // 分块上传的最小单位\r\n    chunkSize:5*1024*1024,\r\n    // 分块上传重试次数\r\n    retries:20,\r\n    currentUploadId: '',\r\n    stopFlag: false  // for multipart upload\r\n}\r\n\r\n/**\r\n *  Get Bucket( List Object)  获取bucket下的objects\r\n * @param bucket  : bucket name\r\n * @param url     : 如：http://kss.ksyun.com/\r\n * @param cb  : callback function\r\n *\r\n * @param {object} params\r\n * {\r\n *     Bucket: '', // 非必传\r\n *\t   delimiter: '', //分隔符，用于对一组参数进行分割的字符。\r\n *\t   'encoding-type': '', //指明请求KS3与KS3响应使用的编码方式。\r\n *\t   maker: '',         //指定列举指定空间中对象的起始位置。KS3按照字母排序方式返回结果，将从给定的 marker 开始返回列表。如果相应内容中IsTruncated为true，则可以使用返回的Contents中的最后一个key作为下次list的marker参数\r\n *\t   'max-keys': 0,  //设置响应体中返回的最大记录数（最后实际返回可能小于该值）。默认为1000。如果你想要的结果在1000条以后，你可以设定 marker 的值来调整起始位置。\r\n *\t   prefix: '',    //限定响应结果列表使用的前缀\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n */\r\nKs3.listObject = function(params, cb) {\r\n    var xhr = new XMLHttpRequest();\r\n    var listObjectParams = {\r\n        delimiter: params['delimiter'],\r\n        'encoding-type': params['encoding-type'],\r\n        marker: params['marker'],\r\n        'max-keys': params['max-keys'],\r\n        prefix: params['prefix']\r\n    };\r\n    var bucketName = params.Bucket || Ks3.config.bucket;\r\n    var region = params.region || Ks3.config.region;\r\n    if (region ) {\r\n        Ks3.config.baseUrl =  Ks3.ENDPOINT[region];\r\n    }\r\n    var url =  Ks3.config.protocol + '://' + bucketName + '.' + Ks3.config.baseUrl;  //元数据获取不要走cdn\r\n    url = Ks3.addURLParam(url, listObjectParams);\r\n\r\n    xhr.overrideMimeType('text/xml'); //兼容火狐\r\n\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4) {\r\n            if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {\r\n                //xml转为json格式方便js读取\r\n                cb(Ks3.xmlToJson(xhr.responseXML));\r\n            } else {\r\n                alert('Request was unsuccessful: ' + xhr.status);\r\n                console.log('status: ' + xhr.status);\r\n            }\r\n        }\r\n    };\r\n    //在金山云存储控制台(ks3.console.ksyun.com)中的”空间设置\"页面需要设置对应空间(bucket)的CORS配置，允许请求来源(Allow Origin: * )和请求头(Allow Header: * )的GET请求,否则浏览器会报跨域错误\r\n    xhr.open('GET', url, true);\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    var signature = params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, '', 'GET', '' , headers, currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    xhr.send(null);\r\n}\r\n\r\n/**\r\n *  Delete Object\r\n * @param {object} params\r\n * {\r\n *      Bucket: '' not required, bucket name\r\n *      Key   : ''   Required ,   object key\r\n *      region : ''   not required  bucket所在region\r\n *      Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n * @param cb  : callback function\r\n */\r\nKs3.delObject = function(params, cb) {\r\n    var bucketName = params.Bucket || Ks3.config.bucket;\r\n    var key = Ks3.encodeKey(params.Key);\r\n    var region = params.region || Ks3.config.region;\r\n    if (region ) {\r\n        Ks3.config.baseUrl =  Ks3.ENDPOINT[region];\r\n    }\r\n    var xhr = new XMLHttpRequest();\r\n    var url = Ks3.config.protocol + '://' + bucketName + '.' + Ks3.config.baseUrl + '/' + key;\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    var signature = params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, key, 'DELETE', '' , headers, currentDate);\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                cb(xhr.status);\r\n            }else {\r\n                alert('Request was unsuccessful: ' + xhr.status);\r\n                console.log('status: ' + xhr.status);\r\n            }\r\n        }\r\n    };\r\n    xhr.open(\"DELETE\", url, true);\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    xhr.send(null);\r\n};\r\n\r\n\r\n/**\r\n * key 进行encodeURIComponent编码，'/'不能被编码\r\n */\r\nKs3.encodeKey = function (key) {\r\n    if(key == null) {\r\n        return '';\r\n    }\r\n    var newKey = encodeURIComponent(key);\r\n    newKey = newKey.replace(/\\+/g,'%20').replace(/\\*/g,'%2A').replace(/%7E/g,'~').replace(/%2F/g, '/');\r\n    return newKey;\r\n}\r\n\r\n/**\r\n * 获取指定object的元数据\r\n * params {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    region : '' not required  bucket所在region\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n */\r\nKs3.headObject = function(params, cb) {\r\n    if (params.Key === null || params.Key === undefined) {\r\n        alert('require the Key');\r\n    }\r\n    var key = Ks3.encodeKey(params.Key);\r\n    var region = params.region || Ks3.config.region;\r\n    if (region ) {\r\n        Ks3.config.baseUrl =  Ks3.ENDPOINT[region];\r\n    }\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    if(!bucketName) {\r\n        alert('require the bucket name');\r\n    }\r\n    var url = Ks3.config.protocol + '://'  + bucketName + '.' + Ks3.config.baseUrl + '/' + key;\r\n    var type = 'HEAD';\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    var signature = params.Signature ||Ks3.generateToken(Ks3.config.SK, bucketName, key, type, '' , headers, currentDate);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                //前端需要访问的头需要在CORS设置的Exposed Header中显式列出\r\n                cb(null, xhr);\r\n            }else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\"}, xhr);\r\n            }\r\n        }\r\n    };\r\n    xhr.open(type, url, true);\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    xhr.send(null);\r\n}\r\n\r\n/**\r\n * 获取指定object\r\n * params {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    region : '' not required  bucket所在region\r\n *    range : ''  not required  for range request\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n */\r\nKs3.getObject = function(params, cb) {\r\n    if (params.Key === null || params.Key === undefined) {\r\n        alert('require the Key');\r\n    }\r\n    var key = Ks3.encodeKey(params.Key);\r\n    var region = params.region || Ks3.config.region;\r\n    if (region ) {\r\n        Ks3.config.baseUrl =  Ks3.ENDPOINT[region];\r\n    }\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    if(!bucketName) {\r\n        alert('require the bucket name');\r\n    }\r\n    var range = params.range || '';\r\n    var url = Ks3.config.protocol + '://' + Ks3.config.baseUrl + '/' + bucketName + '/' + key;\r\n    var type = 'GET';\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    var signature = params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, key, type, '' , headers, currentDate);\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                var bb = new Blob([this.response],{type: this.getResponseHeader('Content-Type')});  //from IE 10\r\n                cb(null, bb, xhr);\r\n            }else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\"}, bb, xhr);\r\n            }\r\n        }\r\n    };\r\n    xhr.open(type, url, true);\r\n    xhr.responseType = 'arraybuffer';\r\n    var reRange = /^bytes=(\\d+)-(\\d+)$/i;\r\n    if(range!==''&& reRange.test(range)){\r\n        xhr.setRequestHeader('Range',range);\r\n    }\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    xhr.send(null);\r\n}\r\n\r\n/**\r\n * put object上传文件\r\n * params {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    region : '' not required  bucket所在region\r\n *    ACL: ''   not required   private | public-read\r\n *    File: Object  required 上传的文件\r\n *    ProgressListener: Function, not required   上传进度监听函数\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n */\r\nKs3.putObject = function(params, cb) {\r\n    if (params.Key === null || params.Key === undefined) {\r\n        alert('require the Key');\r\n    }\r\n    var key = Ks3.encodeKey(params.Key);\r\n    var region = params.region || Ks3.config.region;\r\n    if (region ) {\r\n        Ks3.config.baseUrl =  Ks3.ENDPOINT[region];\r\n    }\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    if(!bucketName) {\r\n        alert('require the bucket name');\r\n    }\r\n    var url = Ks3.config.protocol + '://' + bucketName + '.' + Ks3.config.baseUrl + '/' + key;\r\n    var type = 'PUT';\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(type, url, true);\r\n\r\n    var headers = {};\r\n    var acl = params.ACL;\r\n    if (acl == 'private' || acl == 'public-read') {\r\n        var attr_Acl = 'x-' + Ks3.config.prefix + '-acl';\r\n        xhr.setRequestHeader(attr_Acl, acl);\r\n        headers[attr_Acl] = acl;\r\n    }\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    headers['x-kss-date'] = currentDate;\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    var callbackurl = params.callbackurl || '';\r\n    var callbackbody = params.callbackbody || '';\r\n    if(callbackurl) {\r\n        var attr_url = 'x-' + Ks3.config.prefix + '-callbackurl';\r\n        xhr.setRequestHeader(attr_url, callbackurl);\r\n        headers[attr_url] = callbackurl;\r\n    };\r\n    if(callbackbody) {\r\n        var attr_body = 'x-' + Ks3.config.prefix + '-callbackbody';\r\n        xhr.setRequestHeader(attr_body, callbackbody);\r\n        headers[attr_body] = callbackbody;\r\n    };\r\n    var signature = params.Signature ||Ks3.generateToken(Ks3.config.SK, bucketName, key, type, params.File.type ,headers, currentDate);\r\n\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                cb(null);\r\n            }else if(xhr.status === 413 || xhr.status === 415) {\r\n                var errMsg = Ks3.xmlToJson(xhr.responseXML)['Error']['Message'];\r\n                cb({\"msg\":errMsg});\r\n            }else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\"});\r\n            }\r\n        }\r\n    };\r\n    xhr.upload.addEventListener(\"progress\", params.ProgressListener, false);\r\n\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    xhr.send(params.File);\r\n}\r\n\r\n\r\n\r\n/**\r\n * 下面这些部分都是关于分块上传的\r\n */\r\n/**\r\n * 初始化\r\n *  params {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    region : '' not required  bucket所在region\r\n *    ContentType: ''  not required  content type of object key\r\n *    ACL: ''   not required   private | public-read\r\n *    TotalSize: '' not required, 分块上传文件总大小\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n */\r\nKs3.multitpart_upload_init = function(params, cb) {\r\n\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    var Key = Ks3.encodeKey(params.Key) || null;\r\n\r\n    if (!bucketName) {\r\n        throw new Error('require the bucketName');\r\n    }\r\n\r\n    if (!Key) {\r\n        throw new Error('require the object Key');\r\n    }\r\n    var region = params.region || Ks3.config.region;\r\n    if (region ) {\r\n        Ks3.config.baseUrl =  Ks3.ENDPOINT[region];\r\n    }\r\n\r\n    var resource =  Key + '?uploads';\r\n    resource = resource.replace(/\\/\\//g, \"/%2F\");\r\n\r\n    var contentType = params.ContentType || '';\r\n\r\n    var type = 'POST';\r\n    var url = Ks3.config.protocol + '://' + bucketName + '.' + Ks3.config.baseUrl + '/' + resource;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(type, url, true);\r\n\r\n    var headers = {};\r\n    var acl = params.ACL;\r\n    if (acl == 'private' || acl == 'public-read') {\r\n        var attr_Acl = 'x-' + Ks3.config.prefix + '-acl';\r\n        xhr.setRequestHeader(attr_Acl, acl);\r\n        headers[attr_Acl] = acl;\r\n    }\r\n    var totalSize = params.TotalSize;\r\n    if(totalSize) {\r\n       var attr_content_length = 'x-' + Ks3.config.prefix + '-meta-' + 'content-length';\r\n        xhr.setRequestHeader(attr_content_length, totalSize);\r\n        headers[attr_content_length] = totalSize;\r\n    }\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    headers['x-kss-date'] = currentDate;\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    var signature =  params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, resource, type, contentType ,headers, currentDate);\r\n    xhr.overrideMimeType('text/xml'); //兼容火狐\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                var uploadId = Ks3.xmlToJson(xhr.responseXML)['InitiateMultipartUploadResult']['UploadId'];\r\n                cb(null, uploadId);\r\n            }else if(xhr.status === 413 || xhr.status === 415) {\r\n                cb({\"status\":xhr.status, \"msg\": Ks3.xmlToJson(xhr.responseXML)['Error']['Message']},null);\r\n            } else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\"}, null);\r\n            }\r\n        }\r\n    };\r\n\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    if(contentType) {\r\n        xhr.setRequestHeader('Content-Type', contentType);\r\n    }\r\n\r\n    xhr.send(null);\r\n}\r\n\r\n/**\r\n * 上传分块\r\n *  params {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    ContentType: ''  not required  content type of object key\r\n *    PartNumber: ''  Required   分块的序号\r\n *    UploadId: ''   Required    初始化分块上传时获取的上传id\r\n *    body:  表示上传内容的blob对象\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n */\r\nKs3.upload_part = function(params, cb){\r\n\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    var Key = Ks3.encodeKey(params.Key) || null;\r\n    var contentType = params.ContentType || '';\r\n\r\n    var partNumber = (typeof params.PartNumber!=='undefined') ?params.PartNumber: '';\r\n    var uploadId = params.UploadId || '';\r\n\r\n\r\n    if (!bucketName || !Key) {\r\n        throw new Error('require the bucketName and object key');\r\n    }\r\n\r\n    if (partNumber==='' || !uploadId) {\r\n        throw new Error('require the partNumber and uploadId');\r\n    }\r\n    var body = params.body || '';\r\n    var resource = Key + '?partNumber='+partNumber+'&uploadId='+uploadId;\r\n    resource = resource.replace(/\\/\\//g, \"/%2F\");\r\n    var url = Ks3.config.protocol + '://'  +  bucketName + '.' + Ks3.config.baseUrl + '/' + resource;\r\n    var type = 'PUT';\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    var signature =  params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, resource, type, contentType, headers, currentDate);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                var etag = xhr.getResponseHeader('Etag');\r\n                cb(null, partNumber,etag);\r\n            }else if(xhr.status === 413 || xhr.status === 415) {\r\n                cb({\"status\":xhr.status,\"msg\": Ks3.xmlToJson(xhr.responseXML)['Error']['Message']},null);\r\n            } else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\"}, null);\r\n            }\r\n        }\r\n    };\r\n    xhr.open(type, url, true);\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    if(contentType) {\r\n        xhr.setRequestHeader('Content-Type', contentType);\r\n    }\r\n    if(body) {\r\n        //var contentLength = body.byteLength;\r\n        //xhr.setRequestHeader('Content-Length', contentLength);\r\n        xhr.send(body);\r\n    }\r\n}\r\n\r\n/**\r\n * 完成上传（发送合并分块命令）\r\n * @param params\r\n * {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    UploadId: ''   Required    初始化分块上传时获取的上传id\r\n *    body: ''  Required   描述的分块列表的xml文档\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n * @param cb\r\n */\r\nKs3.upload_complete = function(params,cb){\r\n\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    var key = Ks3.encodeKey(params.Key) || null;\r\n    var uploadId = params.UploadId || '';\r\n\tvar callbackurl = params.callbackurl || '';\r\n\tvar callbackbody = params.callbackbody || '';\r\n\r\n    if (!bucketName || !key) {\r\n        throw new Error('require the bucketName and object key');\r\n    }\r\n\r\n    if (!uploadId) {\r\n        throw new Error('require the uploadId');\r\n    }\r\n\r\n    var body = params.body || '';\r\n    var resource =  key + '?uploadId='+uploadId;\r\n    resource = resource.replace(/\\/\\//g, \"/%2F\");\r\n    var contentType = 'text/plain;charset=UTF-8';\r\n\r\n\tvar headers = {};\r\n\tif(callbackurl) {\r\n\t\tvar attr_url = 'x-' + Ks3.config.prefix + '-callbackurl';\r\n\t\theaders[attr_url] = callbackurl;\r\n\t};\r\n\tif(callbackbody) {\r\n\t\tvar attr_body = 'x-' + Ks3.config.prefix + '-callbackbody';\r\n\t\theaders[attr_body] = callbackbody;\r\n\t};\r\n\r\n    var url = Ks3.config.protocol + '://'  + bucketName + '.' + Ks3.config.baseUrl + '/' + resource;\r\n    var type = 'POST';\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    headers['x-kss-date'] = currentDate;\r\n    signature =  params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, resource, type, contentType , headers, currentDate);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.overrideMimeType('text/xml'); //兼容火狐\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                var res = Ks3.xmlToJson(xhr.responseXML);\r\n                cb(null, res);\r\n            }else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\",\"status\": xhr.status}, res);\r\n            }\r\n        }\r\n    };\r\n\r\n    xhr.open(type, url, true);\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n\tif(callbackurl) {\r\n\t\txhr.setRequestHeader('x-kss-callbackurl',callbackurl );\r\n\t}\r\n\tif(callbackbody) {\r\n\t\txhr.setRequestHeader('x-kss-callbackbody',callbackbody );\r\n\t}\r\n    if(body) {\r\n        xhr.send(body);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 取消分块上传\r\n * @param params\r\n * {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    UploadId: ''   Required    初始化分块上传时获取的上传id,\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n * @param cb\r\n */\r\nKs3.abort_multipart_upload = function(params, cb) {\r\n\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    var key = Ks3.encodeKey(params.Key) || null;\r\n    var uploadId = params.UploadId || '';\r\n\r\n    if (!bucketName || !key) {\r\n        throw new Error('require the bucketName and object key');\r\n    }\r\n\r\n    if (!uploadId) {\r\n        throw new Error('require the uploadId');\r\n    }\r\n\r\n    var resource =  key + '?uploadId='+uploadId;\r\n    resource = resource.replace(/\\/\\//g, \"/%2F\");\r\n\r\n    var url = Ks3.config.protocol + '://'  + bucketName + '.' + Ks3.config.baseUrl + '/' + resource;\r\n    var type = 'DELETE';\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    var signature = params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, resource, type, '', headers, currentDate);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status == 204 ){\r\n                cb(null, {\"status\":xhr.status});\r\n            }else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\",\"status\": xhr.status});\r\n            }\r\n        }\r\n    };\r\n\r\n    xhr.open(type, url, true);\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n\r\n    xhr.send(null);\r\n\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param params\r\n * {\r\n *    Bucket: '' not required, bucket name\r\n *    Key: ''    Required   object key\r\n *    UploadId: ''   Required    初始化分块上传时获取的上传id\r\n *    Signature: ''  not required, 请求签名,从服务端获取\r\n * }\r\n * @param cb\r\n */\r\nKs3.upload_list_part = function(params,cb){\r\n\r\n    var bucketName = params.Bucket || Ks3.config.bucket || '';\r\n    var key = Ks3.encodeKey(params.Key) || null;\r\n    var uploadId = params.UploadId || '';\r\n\r\n    if (!bucketName || !key) {\r\n        throw new Error('require the bucketName and object key');\r\n    }\r\n\r\n    if (!uploadId) {\r\n        throw new Error('require the uploadId');\r\n    }\r\n\r\n    var resource =  key + '?uploadId='+uploadId;\r\n    resource = resource.replace(/\\/\\//g, \"/%2F\");\r\n\r\n    var url = Ks3.config.protocol + '://' + bucketName + '.' + Ks3.config.baseUrl + '/' + resource;\r\n    var type = 'GET';\r\n    var currentDate = (new Date()).toGMTString() + '';\r\n    var headers = {\r\n        'x-kss-date': currentDate\r\n    };\r\n    var signature = params.Signature || Ks3.generateToken(Ks3.config.SK, bucketName, resource, type, '', headers, currentDate);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.overrideMimeType('text/xml'); //兼容火狐\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {\r\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304){\r\n                var res = Ks3.xmlToJson(xhr.responseXML);\r\n                cb(null, res);\r\n            }else {\r\n                console.log('status: ' + xhr.status);\r\n                cb({\"msg\":\"request failed\",\"status\": xhr.status}, res);\r\n            }\r\n        }\r\n    };\r\n\r\n    xhr.open(type, url, true);\r\n    xhr.setRequestHeader('x-kss-date', currentDate);\r\n    xhr.setRequestHeader('Authorization','KSS ' + Ks3.config.AK + ':' + signature );\r\n    xhr.send(null);\r\n}\r\n\r\n/**\r\n * 判断字符串是否以给定的字符串结尾\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nString.prototype.endWith = function(str){\r\n    var reg=new RegExp(str+\"$\");\r\n    return reg.test(this);\r\n}\r\n\r\n/**\r\n * change string to XML DOM\r\n * @param oString\r\n * @returns {*}\r\n */\r\nKs3.parseStringToXML = function(oString) {\r\n    if (document.implementation && document.implementation.createDocument) {\r\n        var xmlDoc = new DOMParser().parseFromString(oString, 'text/xml');\r\n    }\r\n    else if (window.ActiveXObject) {\r\n        var xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n        xmlDoc.loadXML(oString);\r\n    }\r\n    else\r\n    {\r\n        alert('浏览器不支持xml解析，请升级浏览器');\r\n        return null;\r\n    }\r\n    return xmlDoc;\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}